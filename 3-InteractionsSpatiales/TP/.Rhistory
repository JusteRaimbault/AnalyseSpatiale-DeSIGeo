log(0)
NaN
shortest_paths(g_lattice_del,from = sample.int(vcount(g_lattice_del),1),
to = sample.int(vcount(g_lattice_del),1)
)
components(g_lattice_del)$csize
g_lattice = igraph::make_lattice(dimvector = c(50,50))
positions = layout_on_grid(g_lattice)
V(g_lattice)$x = positions[,1];V(g_lattice)$y = positions[,2]
p = 0.7
g_lattice_del = subgraph.edges(g_lattice,
sample.int(
n = ecount(g_lattice),
size = floor(p* ecount(g_lattice)),
replace = F
),
delete.vertices = T
)
V(g_lattice_del)$x = jitter(factor = 1.0,V(g_lattice_del)$x)
V(g_lattice_del)$y = jitter(factor = 1.0,V(g_lattice_del)$y)
vertices_ends = ends(g_lattice_del,es = 1:ecount(g_lattice_del))
edge_lengths = apply(vertices_ends,1,function(e){
return(
sqrt(
(V(g_lattice_del)$x[e[1]] - V(g_lattice_del)$x[e[2]])^2 +
(V(g_lattice_del)$y[e[1]] - V(g_lattice_del)$y[e[2]])^2
)
)
})
E(g_lattice_del)$weight = edge_lengths
# tous les plus courts chemins
d = distances(g_lattice_del)
summary(c(d[d<Inf]))
shortest_paths(g_lattice_del,from = sample.int(vcount(g_lattice_del),1),
to = sample.int(vcount(g_lattice_del),1)
)
path = shortest_paths(g_lattice_del,from = sample.int(vcount(g_lattice_del),1),
to = sample.int(vcount(g_lattice_del),1)
)$vpath[[1]]
path
1221%in%path
path = shortest_paths(g_lattice_del,from = sample.int(vcount(g_lattice_del),1),
to = sample.int(vcount(g_lattice_del),1)
)$vpath[[1]]
plot(g_lattice_del,vertex.size=1,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'red','black')
)
V(g_lattice_del)%in%path
ifelse(V(g_lattice_del)%in%path,'red','black')
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'red','black')
)
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'blue','black')
)
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'yellow','black')
)
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'green','black')
)
# plus court chemin entre coins
first_col = V(g_lattice_del)[V(g_lattice_del)$x == min(V(g_lattice_del)$x)]
first_col
min(V(g_lattice_del)$x)
# plus court chemin entre coins
first_col = V(g_lattice_del)[V(g_lattice_del)$x < min(V(g_lattice_del)$x + 1)]
first_col
from = first_col[first_col$y==max(first_col$y)]
from
last_col = V(g_lattice_del)[V(g_lattice_del)$x > max(V(g_lattice_del)$x - 1)]
last_col
to = last_col[last_col$y==min(last_col$y)]
to
from
path = shortest_paths(g_lattice_del,from = from,to = to)$vpath[[1]]
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'green','black')
)
g_lattice = igraph::make_lattice(dimvector = c(50,50))
positions = layout_on_grid(g_lattice)
V(g_lattice)$x = positions[,1];V(g_lattice)$y = positions[,2]
p = 0.5
g_lattice_del = subgraph.edges(g_lattice,
sample.int(
n = ecount(g_lattice),
size = floor(p* ecount(g_lattice)),
replace = F
),
delete.vertices = T
)
V(g_lattice_del)$x = jitter(factor = 1.0,V(g_lattice_del)$x)
V(g_lattice_del)$y = jitter(factor = 1.0,V(g_lattice_del)$y)
plot(g_lattice_del,vertex.size=0,vertex.label=NA)
# calculer les poids: distance geographique
#edge_lengths = lapply(E(g_lattice_del),function(e){
#  bothends = ends(e)
#  sqrt((bothends[1]$x - bothends[2]$x)^2 +
#         (bothends[1]$y - bothends[2]$y)^2)
#})
vertices_ends = ends(g_lattice_del,es = 1:ecount(g_lattice_del))
edge_lengths = apply(vertices_ends,1,function(e){
return(
sqrt(
(V(g_lattice_del)$x[e[1]] - V(g_lattice_del)$x[e[2]])^2 +
(V(g_lattice_del)$y[e[1]] - V(g_lattice_del)$y[e[2]])^2
)
)
})
E(g_lattice_del)$weight = edge_lengths
# tous les plus courts chemins
d = distances(g_lattice_del)
summary(c(d[d<Inf]))
# un plus court chemin
path = shortest_paths(g_lattice_del,from = sample.int(vcount(g_lattice_del),1),
to = sample.int(vcount(g_lattice_del),1)
)$vpath[[1]]
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'green','black')
)
# plus court chemin entre coins
first_col = V(g_lattice_del)[V(g_lattice_del)$x < min(V(g_lattice_del)$x + 1)]
from = first_col[first_col$y==max(first_col$y)]
last_col = V(g_lattice_del)[V(g_lattice_del)$x > max(V(g_lattice_del)$x - 1)]
to = last_col[last_col$y==min(last_col$y)]
path = shortest_paths(g_lattice_del,from = from,to = to)$vpath[[1]]
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'green','black')
)
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'green','black')
)
fromm
from
to
path = shortest_paths(g_lattice_del,from = from,to = to)$vpath[[1]]
path
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'green','black')
)
components(g_lattice_del)$csize
# plus court chemin entre coins
comps = components(g_lattice_del)
index_of_largest_component = which(comps$csize==max(comps$csize))
vertices_in_largest = comps$membership==index_of_largest_component
subgraph_largest = induced_subgraph(g_lattice_del, vertices_in_largest)
comps = components(g_lattice_del)
index_of_largest_component = which(comps$csize==max(comps$csize))
vertices_in_largest = comps$membership==index_of_largest_component
subgraph_largest = induced_subgraph(g_lattice_del, vertices_in_largest)
first_col = V(subgraph_largest)[V(subgraph_largest)$x < min(V(subgraph_largest)$x + 1)]
from = first_col[first_col$y==max(first_col$y)]
last_col = V(subgraph_largest)[V(subgraph_largest)$x > max(V(subgraph_largest)$x - 1)]
to = last_col[last_col$y==min(last_col$y)]
path = shortest_paths(subgraph_largest,from = from,to = to)$vpath[[1]]
plot(subgraph_largest,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(subgraph_largest)%in%path,'green','black')
)
g_lattice = igraph::make_lattice(dimvector = c(50,50))
positions = layout_on_grid(g_lattice)
V(g_lattice)$x = positions[,1];V(g_lattice)$y = positions[,2]
p = 0.55
g_lattice_del = subgraph.edges(g_lattice,
sample.int(
n = ecount(g_lattice),
size = floor(p* ecount(g_lattice)),
replace = F
),
delete.vertices = T
)
V(g_lattice_del)$x = jitter(factor = 1.0,V(g_lattice_del)$x)
V(g_lattice_del)$y = jitter(factor = 1.0,V(g_lattice_del)$y)
plot(g_lattice_del,vertex.size=0,vertex.label=NA)
# calculer les poids: distance geographique
#edge_lengths = lapply(E(g_lattice_del),function(e){
#  bothends = ends(e)
#  sqrt((bothends[1]$x - bothends[2]$x)^2 +
#         (bothends[1]$y - bothends[2]$y)^2)
#})
vertices_ends = ends(g_lattice_del,es = 1:ecount(g_lattice_del))
edge_lengths = apply(vertices_ends,1,function(e){
return(
sqrt(
(V(g_lattice_del)$x[e[1]] - V(g_lattice_del)$x[e[2]])^2 +
(V(g_lattice_del)$y[e[1]] - V(g_lattice_del)$y[e[2]])^2
)
)
})
E(g_lattice_del)$weight = edge_lengths
# tous les plus courts chemins
d = distances(g_lattice_del)
summary(c(d[d<Inf]))
# un plus court chemin
path = shortest_paths(g_lattice_del,from = sample.int(vcount(g_lattice_del),1),
to = sample.int(vcount(g_lattice_del),1)
)$vpath[[1]]
plot(g_lattice_del,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(g_lattice_del)%in%path,'green','black')
)
# plus court chemin entre coins
comps = components(g_lattice_del)
index_of_largest_component = which(comps$csize==max(comps$csize))
vertices_in_largest = comps$membership==index_of_largest_component
subgraph_largest = induced_subgraph(g_lattice_del, vertices_in_largest)
first_col = V(subgraph_largest)[V(subgraph_largest)$x < min(V(subgraph_largest)$x + 1)]
from = first_col[first_col$y==max(first_col$y)]
last_col = V(subgraph_largest)[V(subgraph_largest)$x > max(V(subgraph_largest)$x - 1)]
to = last_col[last_col$y==min(last_col$y)]
path = shortest_paths(subgraph_largest,from = from,to = to)$vpath[[1]]
plot(subgraph_largest,vertex.size=2,vertex.label=NA,
vertex.color = ifelse(V(subgraph_largest)%in%path,'green','black')
)
install.packages(ggnetwork)
install.packages("ggnetwork")
library(ggnetwork)
# load directly from URL?
# Data available under a CC-BY-NC-SA Licence at https://github.com/mathbeveridge/asoiaf
nodes <- read_csv("https://raw.githubusercontent.com/mathbeveridge/asoiaf/master/data/asoiaf-all-nodes.csv")
# jittered lattice so that shortest path is unique
g_jitt =
## Partie 2
# resources TP networks
# https://ericmjl.github.io/Network-Analysis-Made-Simple/05-casestudies/01-gameofthrones/
# https://networkofthrones.wordpress.com/the-series/seasons-1-8/
# Data https://github.com/mathbeveridge/asoiaf
library(readr)
# load directly from URL?
# Data available under a CC-BY-NC-SA Licence at https://github.com/mathbeveridge/asoiaf
nodes <- read_csv("https://raw.githubusercontent.com/mathbeveridge/asoiaf/master/data/asoiaf-all-nodes.csv")
edges <- read_csv("https://raw.githubusercontent.com/mathbeveridge/asoiaf/master/data/asoiaf-all-edges.csv")
# construct graph
g <- graph_from_data_frame(edges, directed = F, vertices = nodes)
# plot()
ggnetwork(g,layout = "fruchtermanreingold")
g
# construct graph
g <- graph_from_data_frame(edges, directed = F, vertices = nodes)
# plot()
ggnetwork(g,layout = "fruchtermanreingold")
# plot()
ggplot(g,layout = "fruchtermanreingold")
# plot()
ggplot(g)
# plot()
ggplot(g)+geom_nodes()
# plot
positions = layout.fruchterman.reingold(g)
V(g)$x=positions[,1];V(g)$y=positions[,2]
ggplot(g)+geom_nodes()
ggplot(g,aes(x=x,y=y))+geom_nodes()
ggplot(ggnetwork(g),aes(x=x,y=y))+geom_nodes()
ggplot(g,aes(x=x,y=y))+geom_nodes()
help("geom_nodes")
ggplot(g,aes(x=x,y=y))+geom_nodes()
V(g)$x
#ggplot(g,aes(x=x,y=y))+geom_nodes()
plot(g)
help(layout.fruchterman.reingold)
# plot
positions = layout_with_fr(g)
V(g)$x=positions[,1];V(g)$y=positions[,2]
#ggplot(g,aes(x=x,y=y))+geom_nodes()
plot(g)
V(g)$x=positions[,1]*5;V(g)$y=positions[,2]*5
#ggplot(g,aes(x=x,y=y))+geom_nodes()
plot(g)
#ggplot(g,aes(x=x,y=y))+geom_nodes()
plot(g,vertex.size=1,vertex.label.cex=1)
#ggplot(g,aes(x=x,y=y))+geom_nodes()
plot(g,vertex.size=1,vertex.label=NA)
#ggplot(g,aes(x=x,y=y))+geom_nodes()
plot(g,vertex.size=1,vertex.label.size=0)
help("plot.igraph")
#ggplot(g,aes(x=x,y=y))+geom_nodes()
plot(g,vertex.size=1,vertex.label.cex=0.2)
plot(g,vertex.size=strength(g),vertex.label.cex=strength(g))
max(strength(g))
plot(g,vertex.size=strength(g)/3000,vertex.label.cex=strength(g)/3000)
# 1.1) charger les donnees
# Data available under a CC-BY-NC-SA Licence at https://github.com/mathbeveridge/asoiaf
nodes <- read_csv("https://raw.githubusercontent.com/mathbeveridge/asoiaf/master/data/asoiaf-all-nodes.csv")
edges <- read_csv("https://raw.githubusercontent.com/mathbeveridge/asoiaf/master/data/asoiaf-all-edges.csv")
edges
g = graph_from_data_frame(edges,vertices = nodes,directed = F)
g
positions=layout_with_fr(g)
V(g)$x = positions[,1];V(g)$y = positions[,2]
plot(g,vertex.size=1,vertex.label=NA)
plot(g,vertex.size=1,vertex.label=NA)
#plot(g,vertex.size=1,vertex.label=NA)
plot(g,vertex.size=1,vertex.label.cex=0.3)
deg_pondere = strength(g)
deg_pondere
# histogramme
hist(deg_pondere,breaks = 50)
hist(log(deg_pondere),breaks = 50)
deg = degree(g)
# histogramme
hist(deg,breaks = 50)
lm(data=data.frame(log_wdeg=sort(strength(g),decreasing = T),
log_ranklog = log(1:vcount(g))
),
log_wdeg ~ log_ranklog
)
summary(lm(data=data.frame(log_wdeg=sort(strength(g),decreasing = T),
log_ranklog = log(1:vcount(g))
),
log_wdeg ~ log_ranklog
))
# code facultatif: ajuster des power law avec plus de parametres, ou
# des distributions log-normale
library(poweRlaw)
wdeg_estimator = poweRlaw::conpl$new(deg_pondere)
est = poweRlaw::estimate_xmin(wdeg_estimator,xmax = max(deg_pondere))
wdeg_estimator$setXmin(est)
wdeg_estimator_lnorm = poweRlaw::conlnorm$new(deg_pondere)
est_lnorm = poweRlaw::estimate_xmin(wdeg_estimator_lnorm,xmax = max(deg_pondere))
wdeg_estimator_lnorm$setXmin(est_lnorm)
plot(wdeg_estimator);lines(wdeg_estimator, col=2, lwd=2);lines(wdeg_estimator_lnorm, col=3, lwd=2)
closeness(g)
clos_centralities = closeness(g)
summary(clos_centralities)
hist(clos_centralities,nbreaks=50)
hist(clos_centralities,breaks = 50)
clos_betwenness = betweenness(g)
hist(clos_betwenness,breaks = 50)
hist(log(clos_betwenness),breaks = 50)
V(g)$name
V(g)$name[clos_betwenness=max(clos_betwenness)]
clos_betwenness = betweenness(g)
V(g)$name[clos_betwenness==max(clos_betwenness)]
V(g)$name[clos_betwenness>quantile(clos_betwenness,c(0.95))]
V(g)$name[clos_betwenness>quantile(clos_betwenness,c(0.97))]
V(g)$name[strength(g)==max(strength(g))]
V(g)$name[strength(g)>quantile(strength(g),c(0.97))]
cluster_louvain(g)
coms = cluster_louvain(g)
modularity(coms)
membership(coms)
plot(g,
vertex.size = strength(g),
vertex.label.cex = clos_betwenness,
vertex.color = membership(coms)
)
strength(g)
summary(strength(g))
summary(clos_betwenness)
plot(g,
vertex.size = strength(g)/3000,
vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = strength(g)/3000,
vertex.label=NA,
#vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
getwd()
plot(g,
vertex.size = strength(g)/2000,
vertex.label=NA,
#vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = strength(g)/1000,
vertex.label=NA,
#vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = strength(g)/5000,
vertex.frame.color = NA,
vertex.label=NA,
#vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = strength(g)/500,
vertex.frame.color = NA,
vertex.label=NA,
#vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
summary(log(strength(g)/500))
summary(log(strength(g)))
plot(g,
vertex.size = log(strength(g))/2,
vertex.frame.color = NA,
vertex.label=NA,
#vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = log(strength(g))/2,
vertex.frame.color = NA,
vertex.label=NA,
vertex.label.cex = clos_betwenness/50000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = log(strength(g))/2,
vertex.frame.color = NA,
vertex.label=NA,
vertex.label.cex = clos_betwenness/10000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = log(strength(g))/2,
vertex.frame.color = NA,
#vertex.label=NA,
vertex.label.cex = clos_betwenness/20000,
vertex.color = membership(coms)
)
plot(g,
vertex.size = log(strength(g))/2,
vertex.frame.color = NA,
#vertex.label=NA,
vertex.label.cex = clos_betwenness/50000,
vertex.color = membership(coms)
)
summary(clos_betwenness/50000)
plot(g,
vertex.size = log(strength(g))/2,
vertex.frame.color = NA,
vertex.label=NA,
#vertex.label.cex = clos_betwenness/50000,
vertex.color = membership(coms)
)
setwd('~/ComplexSystems/Teaching/2022-AnalyseSpatiale/AnalyseSpatiale-DeSIGeo/3-InteractionsSpatiales/TP/')
library(readr)
library(dplyr)
library(sf)
library(mapsf)
# 1.2) Cartographier la specialisation des aires urbaines
# mf_map(mtq, var = c("", ""), type = "prop_choro")
# fond de carte pays https://www.naturalearthdata.com/downloads/110m-cultural-vectors/
#  -> fichier data/pays/ne_110m_admin_0_countries.shp
pays = st_read(dsn='data/pays/',layer='ne_110m_admin_0_countries')
#mf_map(st_filter(st_transform(pays, st_crs(sfcities)), sfcities))
#mf_map(pays,xlim=c(-10,30),ylim=c(35,62))
#mf_map(pays[pays$CONTINENT=="Europe",])
extent = st_as_sf(data.frame(x=c(-10,-10,30,30),y=c(35,62,35,62)), coords = c("x","y"))
plot(extent)
st_bbox(extent)
st_filter(pays,st_bbox(extent))
#mf_map(st_filter(st_transform(pays, st_crs(sfcities)), sfcities))
#mf_map(pays,xlim=c(-10,30),ylim=c(35,62))
mf_map(pays[pays$CONTINENT=="Europe"&&pays$TYPE=="Country",])
#mf_map(st_filter(st_transform(pays, st_crs(sfcities)), sfcities))
#mf_map(pays,xlim=c(-10,30),ylim=c(35,62))
mf_map(pays[pays$CONTINENT=="Europe"&pays$TYPE=="Country",])
#mf_map(st_filter(st_transform(pays, st_crs(sfcities)), sfcities))
#mf_map(pays,xlim=c(-10,30),ylim=c(35,62))
mf_map(pays[pays$CONTINENT=="Europe"&pays$TYPE%in%c("Country","Sovereign country"),])
#mf_map(st_filter(st_transform(pays, st_crs(sfcities)), sfcities))
#mf_map(pays,xlim=c(-10,30),ylim=c(35,62))
#mf_map(pays[pays$CONTINENT=="Europe"&pays$TYPE%in%c("Country","Sovereign country"),])
#extent = st_as_sf(data.frame(x=c(-10,-10,30,30),y=c(35,62,35,62)), coords = c("x","y"))
#st_crs(extent)<-4326
#mf_map(extent,col = 'lightgrey')
#mf_map(pays[st_filter(pays,st_bbox(extent)),])
ggplot(pays)+xlim(c(-10,30))+ylim(c(35,62))+geom_sf()
library(ggplot2)
#mf_map(st_filter(st_transform(pays, st_crs(sfcities)), sfcities))
#mf_map(pays,xlim=c(-10,30),ylim=c(35,62))
#mf_map(pays[pays$CONTINENT=="Europe"&pays$TYPE%in%c("Country","Sovereign country"),])
#extent = st_as_sf(data.frame(x=c(-10,-10,30,30),y=c(35,62,35,62)), coords = c("x","y"))
#st_crs(extent)<-4326
#mf_map(extent,col = 'lightgrey')
#mf_map(pays[st_filter(pays,st_bbox(extent)),])
ggplot(pays)+xlim(c(-10,30))+ylim(c(35,62))+geom_s
#mf_map(st_filter(st_transform(pays, st_crs(sfcities)), sfcities))
#mf_map(pays,xlim=c(-10,30),ylim=c(35,62))
#mf_map(pays[pays$CONTINENT=="Europe"&pays$TYPE%in%c("Country","Sovereign country"),])
#extent = st_as_sf(data.frame(x=c(-10,-10,30,30),y=c(35,62,35,62)), coords = c("x","y"))
#st_crs(extent)<-4326
#mf_map(extent,col = 'lightgrey')
#mf_map(pays[st_filter(pays,st_bbox(extent)),])
ggplot(pays)+xlim(c(-10,30))+ylim(c(35,62))+geom_sf()
mf_map(sfcities, var = c("pop", "specA"), type = "prop_choro")
# 1.1) Charger les donnees: data/firmsnetwork/{cities.csv,links.csv}
cities = read_csv('data/firmsnetwork/cities.csv')
links = read_csv('data/firmsnetwork/links.csv')
specialisation <- function(zones,activites,activitespec){
counts = as_tibble(zones)[,activites]
counts[is.na(counts)]=0
localshare = counts[,activitespec] / rowSums(counts)
globalShare = sum(counts[,activitespec])/sum(counts)
return(localshare/globalShare)
}
activites = c("sectorB","sectorC","sectorM","sectorK","sectorG","sectorD","sectorJ", "sectorH","sectorF",
"sectorI","sectorO","sectorN","sectorL","sectorS","sectorE","sectorA","sectorR","sectorQ",
"sectorP","sectorT","sectorU")
cities$specA = unlist(specialisation(cities,activites,"sectorA"))
cities$specK = unlist(specialisation(cities,activites,"sectorK"))
sfcities =  st_as_sf(cities,coords = c("X","Y"))
st_crs(sfcities)<- st_crs(4326)
mf_map(sfcities, var = c("pop", "specA"), type = "prop_choro")
mf_map(sfcities)
mf_map(sfcities, var = c("pop", "specA"), type = "prop_choro")
mf_map(sfcities)
mf_map(sfcities, var = c("pop", "specK"), type = "prop_choro")
spint_simple = lm(data=links,formula = log(weight)~log(distance))
summary(spint_simple)
links
# contrainte double
spint_turnover_constraint_OD = lm(data=links,formula = log(weight)~log(distance)+
log(from_turnover)+log(to_turnover)+
from_fua+to_fua)
summary(spint_turnover_constraint_OD)
